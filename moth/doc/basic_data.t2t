
== Basic data ==

 This section presents and describes the data types and constants definitions used by the Moth
Processor.


=== Structures ===

==== Visual Elements ====

 The visual element is the base data type that is used by the Moth Processor. It represents a
visual element that will be displayed in the screen, according with the data of his parameters.
 This data is basically what is represents as follow:

- [**st**] Position - Position of the visual element in the screen;

- [**st**] View - Images of the element and how it should be displayed;

- [**tp**] Key - Key of the element in the list of visual elements.


==== Position ====

 This data type is used to hold the visual element horizontal and vertical positions in the screen.

- [**tp**] X - The horizontal position of the element in the screen;

- [**tp**] Y - The vertical position of the element in the screen.


==== View ====

 The View data type contains the images that the element owns, informations how this data will
be used and internal variables that are used in running time for control issues. The content of
a View data type is the following:

- [**tp**] Viewpoints -  Hold the element image viewpoints (see Type Definitions sub-section for
more info);

- [**tp**] Positions - Number of positions in the ``viewpoints`` attribute;

- [**tp**] Views - Number of views per position;

- [**tp**] Index - Used to access the Viewpoints type "Viewpoints[Index]";

- [**tp**] Update time - For dynamic types, define the update viewpoints interval;

- [**tp**] Update control - Used to "makes" the interval time. Each update screen loops has X 
milliseconds of interval. Each interval increments the control variable. When control*update_screen
equals to update_time we have an update viewpoints event.

- [**en**] Type - The type of the element that determines how the "view" data will be used;


=== Types Definitions ===

==== Viewpoints ====

 This type definitions is made from a BITMAP elements array, and is defined as follow.

```
BITMAP viewpoints[MAX_VIEWPOINTS]
```

 The "viewpoints" type is an abstraction to the user that will just pass this reference
to the Moth Processorfunctions. These functions will split a raw BITMAP and fill the
viewpoints position with splited images. After, the user can call any function to iteract over an
element - or add one - and pass the "viewpoints" reference without doing anything by himself.


==== Key ====

 The key is just an abstraction type that represents the visual element internally (to the system)
and should be held by the user to have access and interact over an element. The definition of this
type is made as follow.

```
unsigned int visual_key
```

=== Enumerations ===

==== Type ====

 Type is an enumeration that is used to informs the visual element types. The types that an visual
element can assume is listed bellow.

- Static - The element viewpoint is static and will not be update unless the Moth Processor
receives a requisition to do that.

- Dynamic - The element viewpoint is dynamic and the processor will update the element viewpoint
according with  "Update time" from View data.


==== Layer Priority ====

The Layer Priority enumeration is used to define in what order the landscape visual elements will
be drawn in the screen. The highest priority layer will be drawn first, the lowest will be draw by
the last. The order applies to both under and over layer elements list. There is five priorities
listed below.

- //priority_1// - The highest priority. The element in this position will be draw first;

- //priority_2// - The element in this position will be draw second;

- //priority_3// - The element in this position will be draw third;

- //priority_4// - The element in this position will be draw fourth;

- //priority_5// - The lowest priority. From the layer list, the element in this position will be
draw by the last;


=== Constants ===

 Some constants that can be used when interacting with the Moth Processor.

- **MAX_VIEWPOINTS** - The constant MAX_VIEWPOINTS that defines the maximum elements of "viewpoints"
type should initillay be about the size of 25. The count is 4 directions (up, right, down and left)
plus 4 viewpoints (stand, left move, stand, right move), in addition to 9 extra positions to append
whatever viewpoint the user want to do (emotions, dead body, transformations, etc).

