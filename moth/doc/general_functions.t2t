
== General Functions ==

 This section intends to give the user an overview about all the functionalities of the Moth
processor, showing some actions like initialization, functions to operate and controle, and
finishing the processor.

 The Moth Processor is "attached" on the use of the 
[Allegro library https://www.allegro.cc], thus is needed to initialize this library before
starting the processor. With that, we can call the processor initialization function that
will return a pthread_id as identifier to monitor and halt the processor. The initialization
function prototype would be:

```
moth_initialize(screen_height, screen_width, frame_rate)
```

 Both the screen size and frame rate (or Frames Per Second - FPS) must be defined at the
initialization. The frame rate will be divided by 1 and we will have the update interval time,
used by the "screen update" thread as illustrated in latter sections.


 To finalize the Moth Processor, is possible to use the finalize function, that will free the
processor allocated resources and join the active threads. The function prototype is shown below.

```
moth_finalize(void)
```

 **WARNING**: Do not finish Allegro library before the Moth Processor, because it will be
using resources from the liballegro.

 Another functions of general use are listed below.

: ``screen_freeze(void)``

 Will stop the screen updating until started again.

: ``screen_start(void)``

 Will start the screen updating. Will be needed only if the ``screen_freeze`` function is used,
because the Moth Processor is initialized in the active (updating) status.

: ``processor_status copy_processor_status(void)``

 Return all the data contained in the processor at the request moment. There is possibility that
if something is updated in the processor, the same thing will change in the returned data too
(some allocated data that is accessed by referece, for example). If you halt the processor
correctly, there is no need to worry about if you have called this function. Better, you need to
worry if you are using something from this function.

: ``save_processor_status(processor_status), file_name``

 Can save all the content from a ``processor_status`` data type in the file specified by file_name.
The data can be loaded with the next function.

: ``load_processor_status(file_name)``

 Will load into the processor the ``processor_status`` data from the file specified by file_name.
This operation will free all the current content contained by the processor.


