
== Updater Thread ==

If the interface thread has a simples functioning, the updater thread is even more (maybe not :D).
His functioning is divided in three steps: Read the control flags; Update the screen with visual
elements from the visual list; sleep.

=== Control Flags ===

To be less heavly, the updater thread will not open any communication channel as a message queue,
and will perceive events when reading the control variables. The events are listed below.

: ``freeze``:

When setm, this flag tells to the udpater that he will skip the step 2 and the screen won't be
updated. **Obs:** The visual elements will not be protected from external [user] updates.


: ``halt``:
This flag tells the updater to halt imediatly. The updater thread is __not__ responsible to free any
resource and will exit with the ``pthread_exit`` function.


: ``fps``: **TODO**
This variable allows to change the game FPS at running time, but will not implemented yet as i can't
see any real use of this kind of feature.


[**even below**]
The time until reading a flag was updated depends on the time that takes to process all the visual
elements (to draw then and update, if needed) plus the sleep internal. So, if we have something in
the visual list, the maximum time to read the flags will be "process visual elements + sleep
interval", and if the visual list is empty, we have the minimum time to read the flags, tha is, the
sleep interval.

The updater thread internal functioning is illustrated below.

| [./graph/updater_thread.dot.png] |
|| Updater thread: Step 1: Read control flags. |


=== Update Screen ===

This section intends just to show the basic functioning of displaying a visual element. What the
update screen step does is shown in the next flowchart.

| [./graph/update_screen.dot.png] |
|| Updater thread: Step 2. Update screen buffer. |


=== Sleep Interval ===
//TODO// Talk about the FPS

